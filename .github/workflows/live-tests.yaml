name: Run live tests

on: [pull_request]

jobs:
  run-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: kartoza/postgis:14-3.1
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASS: postgres
          ALLOW_IP_RANGE: 0.0.0.0/0
          POSTGRES_MULTIPLE_EXTENSIONS: postgis,postgis_topology,postgis_raster,pgrouting
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        python-version: ["3.10"]  # removed python 3.8 and 3.9 to save on GitHub action credits
      max-parallel: 5

    steps:
    - uses: actions/checkout@v3

    - name: Install conda environment
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-name: test
        cache-env: true
        environment-file: false
        channels: conda-forge,observatoire-mobilite
        extra-specs: |
          python=${{ matrix.python-version }}
          pytest
          pytest-cov
          pytest-mock
          psycopg2
          dagster>=1.0.10
          mapmatcher
    
    - name: Set up database
      id: db
      shell: bash -l {0}
      run: |
        python -m odmkraken.deploy setup --dbname edmo
        echo  "dsn_edmo_aoo=$(python -m odmkraken.deploy resetpw edmo_aoo --dsn)/edmo" >> $GITHUB_OUTPUT
      env:
        PGHOST: localhost
        PGPORT: 5432
        PGUSER: postgres
        PGPASS: postgres
        PYTHONPATH: ./src
        
    - name: Import road map
      shell: bash -l {0}
      run: |
        echo "{ops: {load_edges: {config: {network_edge_file: '${EDGES_FILE}'}}, load_nodes: {config: {network_node_file: '${NODES_FILE}'}}}, resources: {local_postgres: {config: {dsn: {env: 'DSN' }}}}}" > job.yaml
        dagster job execute -m odmkraken -j load_network -c job.yaml    
      env:
        DSN: ${{ steps.db.outputs.dsn_edmo_aoo }}
        EDGES_FILE: tests/network.edges.csv.zip
        NODES_FILE: tests/network.nodes.csv.zip
        PYTHONPATH: ./src
    
    - name: Run icts_data
      shell: bash -l {0}
      run: |
        echo "{ops: {extract_from_csv: {config: {file: '${FILE}'}}}, resources: {local_postgres: {config: {dsn: {env: 'DSN'}}}}}" > icts_data_job.yaml
        dagster job execute -m odmkraken -j icts_data -c icts_data_job.yaml
      env:
        DSN: ${{ steps.db.outputs.dsn_edmo_aoo }}
        FILE: tests/testdata.csv.zip
        PYTHONPATH: ./src

    - name: Run mapmatch_bus_data
      shell: bash -l {0}
      run: |
        FILE_ID=$(python -c "import psycopg2; import os; conn = psycopg2.connect(os.environ['DSN']); cur = conn.cursor(); file_id = cur.execute('select id from vehdata.data_files limit 1').fetchone()[0]; print(file_id)")
        echo "{ops: {load_vehicle_timeframes: {config: {file_id: '${FILE_ID}'}}}, resources: {local_postgres: {config: {dsn: {env: 'DSN'}}}}}" > mapmatch_bus_data.yaml
        dagster job execute -m odmkraken -j mapmatch_bus_data -c mapmatch_bus_data.yaml
      env:
        DSN: ${{ steps.db.outputs.dsn_edmo_aoo }}
        PYTHONPATH: ./src
